# -*- coding: utf-8 -*-
"""Movie Recommendation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OpICmxcS2Pk690mJSEPPJXtMZUfuINOA
"""

import csv

# Define the file name
filename = 'movies.csv'

# Define the header and sample data
header = ['Movie ID', 'Title', 'Genre', 'Release Year', 'Rating', 'Number of Votes', 'Duration', 'Director']
data = [
    [1, "The Shawshank Redemption", "Drama", 1994, 9.3, 2500000, 142, "Frank Darabont"],
    [2, "The Godfather", "Crime, Drama", 1972, 9.2, 1800000, 175, "Francis Ford Coppola"],
    [3, "The Dark Knight", "Action, Crime, Drama", 2008, 9.0, 2700000, 152, "Christopher Nolan"],
    [4, "Pulp Fiction", "Crime, Drama", 1994, 8.9, 1900000, 154, "Quentin Tarantino"],
    [5, "Forrest Gump", "Drama, Romance", 1994, 8.8, 2100000, 142, "Robert Zemeckis"],
    [6, "Inception", "Action, Adventure, Sci-Fi", 2010, 8.8, 2300000, 148, "Christopher Nolan"],
    [7, "Fight Club", "Drama", 1999, 8.8, 2000000, 139, "David Fincher"],
    [8, "The Matrix", "Action, Sci-Fi", 1999, 8.7, 1800000, 136, "The Wachowskis"],
    [9, "Goodfellas", "Biography, Crime, Drama", 1990, 8.7, 1200000, 146, "Martin Scorsese"],
    [10, "The Lord of the Rings: The Return of the King", "Action, Adventure, Drama", 2003, 9.0, 1700000, 201, "Peter Jackson"]
]

# Write the data to the CSV file
with open(filename, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(header)
    writer.writerows(data)

print(f"CSV file '{filename}' created successfully!")

import csv

# Load movie data from the CSV file
def load_movies(filename):
    movies = []
    with open(filename, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            movies.append(row)
    return movies

# Save movie data to the CSV file
def save_movies(filename, movies):
    with open(filename, mode='w', newline='', encoding='utf-8') as file:
        fieldnames = ['Movie ID', 'Title', 'Genre', 'Release Year', 'Rating', 'Number of Votes', 'Duration', 'Director']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(movies)

# Add a new movie
def add_new_movie(movies):
    print("\nEnter details for the new movie:")
    movie_id = input("Movie ID: ")
    title = input("Title: ")
    genre = input("Genre: ")
    release_year = input("Release Year: ")
    rating = input("Rating: ")
    number_of_votes = input("Number of Votes: ")
    duration = input("Duration (in minutes): ")
    director = input("Director: ")

    new_movie = {
        'Movie ID': movie_id,
        'Title': title,
        'Genre': genre,
        'Release Year': release_year,
        'Rating': rating,
        'Number of Votes': number_of_votes,
        'Duration': duration,
        'Director': director
    }
    movies.append(new_movie)
    print(f"\nMovie '{title}' added successfully!")

# View movies by filters
def view_movies_by_filter(movies):
    print("\nFilter Options:")
    print("1. View by Genre")
    print("2. View by Release Year")
    print("3. View by Director")
    choice = input("Choose a filter option (1-3): ")

    if choice == "1":
        genre = input("Enter genre to filter by: ").lower()
        filtered_movies = [movie for movie in movies if genre in movie['Genre'].lower()]
    elif choice == "2":
        year = input("Enter release year to filter by: ")
        filtered_movies = [movie for movie in movies if movie['Release Year'] == year]
    elif choice == "3":
        director = input("Enter director to filter by: ").lower()
        filtered_movies = [movie for movie in movies if director in movie['Director'].lower()]
    else:
        print("Invalid filter option.")
        return

    if filtered_movies:
        print("\nFiltered Movies:")
        for movie in filtered_movies:
            print(f"- {movie['Title']} ({movie['Release Year']}) - {movie['Genre']} - Directed by {movie['Director']}")
    else:
        print("\nNo movies found matching the filter criteria.")

# Search for movies by title
def search_by_title(movies, title):
    title = title.lower()
    return [movie for movie in movies if title in movie['Title'].lower()]

# Search for movies by keywords in genres
def search_by_genre(movies, keyword):
    keyword = keyword.lower()
    return [movie for movie in movies if keyword in movie['Genre'].lower()]

# Main function
if __name__ == "__main__":
    # Load movies from the CSV file
    filename = "movies.csv"
    movies = load_movies(filename)

    print("Welcome to Movie Management System!")
    while True:
        print("\nMenu Options:")
        print("1. Add New Movie")
        print("2. View Movies by Filters")
        print("3. Search Movies")
        print("4. Exit")
        choice = input("Choose an option (1-4): ")

        if choice == "1":
            add_new_movie(movies)
            save_movies(filename, movies)

        elif choice == "2":
            view_movies_by_filter(movies)

        elif choice == "3":
            print("\nSearch Options:")
            print("1. Search by Title")
            print("2. Search by Genre Keyword")
            search_choice = input("Choose a search option (1-2): ")

            if search_choice == "1":
                title = input("Enter the movie title to search: ")
                results = search_by_title(movies, title)
                if results:
                    print(f"\nMovies matching '{title}':")
                    for movie in results:
                        print(f"- {movie['Title']} ({movie['Release Year']}) - {movie['Genre']}")
                else:
                    print(f"\nNo movies found with title matching '{title}'.")

            elif search_choice == "2":
                keyword = input("Enter a keyword to search in genres: ")
                results = search_by_genre(movies, keyword)
                if results:
                    print(f"\nMovies matching genre keyword '{keyword}':")
                    for movie in results:
                        print(f"- {movie['Title']} ({movie['Release Year']}) - {movie['Genre']}")
                else:
                    print(f"\nNo movies found with genre keyword '{keyword}'.")

            else:
                print("Invalid search option.")

        elif choice == "4":
            print("Exiting Movie Management System. Goodbye!")
            break

        else:
            print("Invalid option. Please try again.")

